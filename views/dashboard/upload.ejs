<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Uploader</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a3e 50%, #2d1b69 100%);
            min-height: 100vh;
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .glow {
            box-shadow: 0 0 15px rgba(168, 85, 247, 0.5);
        }
        .progress-bar {
            transition: width 0.3s ease;
        }
        .file-card {
            transition: all 0.3s ease;
        }
        .file-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        #drop-zone.drag-over {
            background: rgba(255, 255, 255, 0.1);
            border-color: #8b5cf6;
            box-shadow: 0 0 20px rgba(139, 92, 246, 0.4);
        }
        .storage-bar {
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
        }
        .pulse {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        
        /* Custom spinner */
        .spinner {
            width: 40px;
            height: 40px;
            position: relative;
            margin: 0 auto;
        }
        .spinner .dot {
            width: 100%;
            height: 100%;
            position: absolute;
            left: 0;
            top: 0;
        }
        .spinner .dot:before {
            content: '';
            display: block;
            width: 15%;
            height: 15%;
            background-color: #8b5cf6;
            border-radius: 100%;
            animation: spinner-bounce 1.2s infinite ease-in-out both;
        }
        .spinner .dot:nth-child(1) { transform: rotate(30deg); }
        .spinner .dot:nth-child(2) { transform: rotate(60deg); }
        .spinner .dot:nth-child(3) { transform: rotate(90deg); }
        .spinner .dot:nth-child(4) { transform: rotate(120deg); }
        .spinner .dot:nth-child(5) { transform: rotate(150deg); }
        .spinner .dot:nth-child(6) { transform: rotate(180deg); }
        .spinner .dot:nth-child(7) { transform: rotate(210deg); }
        .spinner .dot:nth-child(8) { transform: rotate(240deg); }
        .spinner .dot:nth-child(9) { transform: rotate(270deg); }
        .spinner .dot:nth-child(10) { transform: rotate(300deg); }
        .spinner .dot:nth-child(11) { transform: rotate(330deg); }
        .spinner .dot:nth-child(1):before { animation-delay: -1.1s; }
        .spinner .dot:nth-child(2):before { animation-delay: -1.0s; }
        .spinner .dot:nth-child(3):before { animation-delay: -0.9s; }
        .spinner .dot:nth-child(4):before { animation-delay: -0.8s; }
        .spinner .dot:nth-child(5):before { animation-delay: -0.7s; }
        .spinner .dot:nth-child(6):before { animation-delay: -0.6s; }
        .spinner .dot:nth-child(7):before { animation-delay: -0.5s; }
        .spinner .dot:nth-child(8):before { animation-delay: -0.4s; }
        .spinner .dot:nth-child(9):before { animation-delay: -0.3s; }
        .spinner .dot:nth-child(10):before { animation-delay: -0.2s; }
        .spinner .dot:nth-child(11):before { animation-delay: -0.1s; }
        
        @keyframes spinner-bounce {
            0%, 80%, 100% { 
                transform: scale(0);
            } 40% { 
                transform: scale(1.0);
            }
        }
        
        /* Modal styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }
        .modal {
            background: #1a1a3e;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            transform: translateY(-50px);
            transition: transform 0.4s ease;
            overflow: hidden;
        }
        .modal-overlay.active .modal {
            transform: translateY(0);
        }
        .modal-header {
            padding: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .modal-body {
            padding: 20px;
        }
        .modal-footer {
            padding: 15px 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        .modal-close {
            background: none;
            border: none;
            color: #fff;
            font-size: 1.5rem;
            cursor: pointer;
        }
        
        /* Upload status indicators */
        .upload-status {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            margin-bottom: 10px;
        }
        .status-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(139, 92, 246, 0.3);
            border-top: 2px solid #8b5cf6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .status-success {
            color: #10b981;
        }
        .status-error {
            color: #ef4444;
        }
    </style>
</head>
<body>
    <div class="container mx-auto px-4 py-6">
        <nav class="mb-6">
            <div class="flex flex-wrap gap-4">
                <a href="/dashboard" class="px-4 py-2 bg-blue-600 rounded hover:bg-blue-700 transition-colors">Dashboard</a>
                <a href="/dashboard/upload" class="px-4 py-2 bg-purple-600 rounded glow">Upload</a>
                <a href="/dashboard/gallery" class="px-4 py-2 bg-blue-600 rounded hover:bg-blue-700 transition-colors">Gallery</a>
                <a href="/dashboard/categories" class="px-4 py-2 bg-blue-600 rounded hover:bg-blue-700 transition-colors">Categories</a>
                <a href="/logout" class="px-4 py-2 bg-red-600 rounded hover:bg-red-700 transition-colors ml-auto">Logout</a>
            </div>
        </nav>

        <!-- Storage Usage Indicator -->
        <div class="mb-6 bg-white/5 backdrop-blur-lg border border-white/20 rounded-xl p-4">
            <div class="flex justify-between items-center mb-2">
                <h3 class="text-sm font-medium text-gray-300">Storage Usage</h3>
                <span class="text-xs text-gray-400" id="storage-percentage">0%</span>
            </div>
            <div class="storage-bar bg-white/10">
                <div id="storage-used-bar" class="storage-bar h-full bg-gradient-to-r from-green-400 to-blue-500" style="width: 0%"></div>
            </div>
            <div class="flex justify-between text-xs text-gray-400 mt-1">
                <span id="storage-used">0 MB</span>
                <span id="storage-total">10 GB</span>
            </div>
        </div>

        <div class="space-y-6">
            <div>
                <h1 class="text-3xl font-bold">Upload Images</h1>
                <p class="text-gray-400 mt-1">Add new images to your vault (up to 100MB per file)</p>
            </div>

            <div class="bg-white/5 backdrop-blur-lg border border-white/20 rounded-xl p-6">
                <form id="upload-form" enctype="multipart/form-data" class="space-y-6">
                    <div>
                        <label for="category" class="block text-sm font-medium text-gray-300 mb-2">Category *</label>
                        <select id="category" name="category" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none">
                            <option value="">Select a category...</option>
                            <option value="1">Nature</option>
                            <option value="2">Portraits</option>
                            <option value="3">Abstract</option>
                        </select>
                        <p class="text-yellow-400 text-sm mt-2">⚠️ You need to create a category first. <a href="/dashboard/categories" class="text-blue-400 hover:underline">Create one here</a>.</p>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Images *</label>
                        <div id="drop-zone" class="border-2 border-dashed border-white/20 rounded-lg p-8 text-center cursor-pointer transition-all duration-300">
                            <div class="text-4xl mb-3 text-gray-400">
                                <i class="fas fa-cloud-upload-alt"></i>
                            </div>
                            <p class="text-gray-300 mb-2">Drag and drop images here, or click to select</p>
                            <p class="text-sm text-gray-500">Supports: JPG, PNG, GIF, WebP, BMP, TIFF (Max: 100MB each)</p>
                            <input type="file" id="image-files" name="imageFiles" multiple accept="image/*" class="hidden">
                        </div>
                        <div id="file-list" class="mt-4 space-y-2">
                            <p class="text-sm text-gray-300 font-medium">Selected files:</p>
                            <div id="selected-files" class="space-y-2"></div>
                            <div class="flex justify-between text-xs text-gray-400 mt-2">
                                <span id="total-files">0 files</span>
                                <span id="total-size">0 MB</span>
                            </div>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="tags" class="block text-sm font-medium text-gray-300 mb-2">Tags</label>
                            <input type="text" id="tags" name="tags" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none" placeholder="e.g., blog, header, icons (comma-separated)">
                        </div>
                        <div>
                            <label for="alt" class="block text-sm font-medium text-gray-300 mb-2">Alt Text</label>
                            <input type="text" id="alt" name="alt" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none" placeholder="Alternative text for accessibility">
                        </div>
                    </div>

                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-300 mb-2">Description</label>
                        <textarea id="description" name="description" rows="3" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white resize-none focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none" placeholder="Optional description for these images"></textarea>
                    </div>

                    <div class="flex flex-wrap gap-4">
                        <button type="submit" id="upload-btn" class="flex-1 bg-gradient-to-r from-pink-500 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-pink-600 hover:to-purple-700 transition-all duration-300 flex items-center justify-center">
                            <i class="fas fa-upload mr-2"></i>
                            <span id="upload-text">Upload Images</span>
                        </button>
                        <button type="button" id="clear-btn" class="px-6 py-3 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-colors flex items-center">
                            <i class="fas fa-times mr-2"></i>
                            Clear
                        </button>
                    </div>

                    <div id="upload-status-container" class="space-y-3 hidden">
                        <h3 class="text-sm font-medium text-gray-300">Upload Progress</h3>
                        <div id="file-progress-container"></div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal Template -->
    <div class="modal-overlay" id="modal">
        <div class="modal">
            <div class="modal-header">
                <h2 class="text-xl font-bold" id="modal-title">Modal Title</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p id="modal-message">Modal message goes here.</p>
                <div id="modal-content"></div>
            </div>
            <div class="modal-footer">
                <button class="px-4 py-2 bg-gray-600 rounded hover:bg-gray-700" id="modal-cancel">Cancel</button>
                <button class="px-4 py-2 bg-purple-600 rounded hover:bg-purple-700" id="modal-confirm">Confirm</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('upload-form');
            const dropZone = document.getElementById('drop-zone');
            const fileInput = document.getElementById('image-files');
            const fileList = document.getElementById('file-list');
            const selectedFiles = document.getElementById('selected-files');
            const uploadBtn = document.getElementById('upload-btn');
            const clearBtn = document.getElementById('clear-btn');
            const uploadStatusContainer = document.getElementById('upload-status-container');
            const fileProgressContainer = document.getElementById('file-progress-container');
            const totalFilesElement = document.getElementById('total-files');
            const totalSizeElement = document.getElementById('total-size');
            const storageUsedBar = document.getElementById('storage-used-bar');
            const storagePercentage = document.getElementById('storage-percentage');
            const storageUsed = document.getElementById('storage-used');
            const storageTotal = document.getElementById('storage-total');
            
            // Modal elements
            const modal = document.getElementById('modal');
            const modalTitle = document.getElementById('modal-title');
            const modalMessage = document.getElementById('modal-message');
            const modalContent = document.getElementById('modal-content');
            const modalCancel = document.getElementById('modal-cancel');
            const modalConfirm = document.getElementById('modal-confirm');
            const modalClose = document.querySelector('.modal-close');

            let selectedFilesList = [];
            let uploadsInProgress = 0;

            // Initialize storage info with mock data
            updateStorageInfo(1024 * 1024 * 512, 1024 * 1024 * 1024 * 10); // 512MB used of 10GB

            // Drag and drop handlers
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            dropZone.addEventListener('click', () => fileInput.click());
            
            dropZone.addEventListener('dragover', function() {
                dropZone.classList.add('drag-over');
            });
            
            dropZone.addEventListener('dragleave', function() {
                dropZone.classList.remove('drag-over');
            });
            
            dropZone.addEventListener('drop', function(e) {
                dropZone.classList.remove('drag-over');
                const files = Array.from(e.dataTransfer.files).filter(f => f.type.startsWith('image/'));
                handleFiles(files);
            });

            fileInput.addEventListener('change', function(e) {
                handleFiles(Array.from(e.target.files));
            });

            clearBtn.addEventListener('click', function() {
                showModal(
                    'Clear Form', 
                    'Are you sure you want to clear all selected files and form data?',
                    'confirm',
                    () => {
                        form.reset();
                        selectedFilesList = [];
                        updateFileList();
                        uploadStatusContainer.classList.add('hidden');
                        fileProgressContainer.innerHTML = '';
                    }
                );
            });

            function handleFiles(files) {
                // Check file sizes (max 100MB)
                const oversizedFiles = files.filter(f => f.size > 100 * 1024 * 1024);
                
                if (oversizedFiles.length > 0) {
                    showModal(
                        'File Too Large', 
                        `The following files exceed the 100MB limit:\n${oversizedFiles.map(f => f.name).join('\n')}\n\nThese files will not be uploaded.`,
                        'alert'
                    );
                    // Only keep files that are within size limit
                    files = files.filter(f => f.size <= 100 * 1024 * 1024);
                }
                
                selectedFilesList = [...selectedFilesList, ...files];
                updateFileList();
            }

            function updateFileList() {
                if (selectedFilesList.length === 0) {
                    fileList.classList.add('hidden');
                    return;
                }

                fileList.classList.remove('hidden');
                
                // Calculate total size
                const totalSizeBytes = selectedFilesList.reduce((acc, file) => acc + file.size, 0);
                const totalSizeMB = (totalSizeBytes / 1024 / 1024).toFixed(1);
                
                // Update file count and size
                totalFilesElement.textContent = `${selectedFilesList.length} file${selectedFilesList.length !== 1 ? 's' : ''}`;
                totalSizeElement.textContent = `${totalSizeMB} MB`;
                
                // Render file list
                selectedFiles.innerHTML = selectedFilesList.map((file, index) => {
                    const sizeMB = (file.size / 1024 / 1024).toFixed(2);
                    return `
                        <div class="file-card flex items-center justify-between bg-white/10 rounded-lg p-3">
                            <div class="flex items-center space-x-3">
                                <i class="fas fa-file-image text-blue-400"></i>
                                <div class="truncate max-w-xs">
                                    <div class="text-sm text-white truncate">${file.name}</div>
                                    <div class="text-xs text-gray-400">${sizeMB} MB</div>
                                </div>
                            </div>
                            <button type="button" onclick="removeFile(${index})" class="text-red-400 hover:text-red-300 transition-colors">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `;
                }).join('');
            }

            window.removeFile = function(index) {
                selectedFilesList.splice(index, 1);
                updateFileList();
            }

            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                if (selectedFilesList.length === 0) {
                    showModal('No Files Selected', 'Please select at least one image to upload.', 'alert');
                    return;
                }

                const categorySelect = document.getElementById('category');
                if (!categorySelect.value) {
                    showModal('Category Required', 'Please select a category for your images.', 'alert');
                    return;
                }

                // Check if user has enough storage
                const totalSizeBytes = selectedFilesList.reduce((acc, file) => acc + file.size, 0);
                const storageAvailable = parseFloat(storageTotal.dataset.total) - parseFloat(storageUsed.dataset.used);
                
                if (totalSizeBytes > storageAvailable) {
                    showModal('Insufficient Storage', 'You do not have enough storage space available for these files.', 'alert');
                    return;
                }

                // Show upload confirmation modal
                showModal(
                    'Confirm Upload', 
                    `You are about to upload ${selectedFilesList.length} file${selectedFilesList.length !== 1 ? 's' : ''} (${totalSizeElement.textContent}). Do you want to continue?`,
                    'confirm',
                    startUpload
                );
            });

            function startUpload() {
                uploadBtn.disabled = true;
                document.getElementById('upload-text').textContent = 'Uploading...';
                uploadStatusContainer.classList.remove('hidden');
                
                // Create progress indicators for each file
                fileProgressContainer.innerHTML = '';
                selectedFilesList.forEach((file, index) => {
                    const progressHtml = `
                        <div class="upload-status" id="file-${index}">
                            <div class="status-spinner"></div>
                            <div class="flex-1">
                                <div class="text-sm truncate">${file.name}</div>
                                <div class="flex items-center gap-3 mt-1">
                                    <div class="w-full bg-white/10 rounded-full h-1.5">
                                        <div class="bg-gradient-to-r from-pink-500 to-purple-600 h-1.5 rounded-full progress-bar" style="width: 0%" id="progress-bar-${index}"></div>
                                    </div>
                                    <span class="text-xs text-gray-400" id="progress-text-${index}">0%</span>
                                </div>
                            </div>
                        </div>
                    `;
                    fileProgressContainer.innerHTML += progressHtml;
                });

                // Simulate file uploads (in a real app, this would be actual AJAX requests)
                selectedFilesList.forEach((file, index) => {
                    simulateFileUpload(file, index);
                });
            }

            function simulateFileUpload(file, index) {
                uploadsInProgress++;
                let progress = 0;
                const interval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress >= 100) {
                        progress = 100;
                        clearInterval(interval);
                        uploadsInProgress--;
                        
                        // Update UI for completed upload
                        document.getElementById(`progress-bar-${index}`).style.width = '100%';
                        document.getElementById(`progress-text-${index}`).textContent = '100%';
                        const statusElement = document.getElementById(`file-${index}`);
                        statusElement.querySelector('.status-spinner').classList.add('hidden');
                        
                        // Add success indicator
                        const successIcon = document.createElement('i');
                        successIcon.className = 'fas fa-check-circle status-success';
                        statusElement.querySelector('.status-spinner').parentNode.appendChild(successIcon);
                        
                        // If all uploads are complete
                        if (uploadsInProgress === 0) {
                            setTimeout(() => {
                                showModal(
                                    'Upload Complete', 
                                    `Successfully uploaded ${selectedFilesList.length} file${selectedFilesList.length !== 1 ? 's' : ''}.`,
                                    'success',
                                    () => {
                                        form.reset();
                                        selectedFilesList = [];
                                        updateFileList();
                                        uploadStatusContainer.classList.add('hidden');
                                        uploadBtn.disabled = false;
                                        document.getElementById('upload-text').textContent = 'Upload Images';
                                        
                                        // Update storage info (mock)
                                        const newUsed = parseFloat(storageUsed.dataset.used) + (1024 * 1024 * 50); // Add 50MB
                                        updateStorageInfo(newUsed, parseFloat(storageTotal.dataset.total));
                                    }
                                );
                            }, 500);
                        }
                    } else {
                        // Update progress
                        document.getElementById(`progress-bar-${index}`).style.width = `${progress}%`;
                        document.getElementById(`progress-text-${index}`).textContent = `${Math.round(progress)}%`;
                    }
                }, 300 + Math.random() * 400);
            }

            function updateStorageInfo(usedBytes, totalBytes) {
                // Update storage bar
                const percentage = (usedBytes / totalBytes) * 100;
                storageUsedBar.style.width = `${percentage}%`;
                storagePercentage.textContent = `${percentage.toFixed(1)}%`;
                
                // Update text values
                const usedMB = (usedBytes / (1024 * 1024)).toFixed(1);
                const totalGB = (totalBytes / (1024 * 1024 * 1024)).toFixed(1);
                
                storageUsed.textContent = `${usedMB} MB`;
                storageUsed.dataset.used = usedBytes;
                
                storageTotal.textContent = `${totalGB} GB`;
                storageTotal.dataset.total = totalBytes;
            }

            // Modal functions
            function showModal(title, message, type, confirmCallback = null) {
                modalTitle.textContent = title;
                modalMessage.textContent = message;
                
                // Clear previous content
                modalContent.innerHTML = '';
                
                // Set modal type
                if (type === 'alert') {
                    modalConfirm.classList.add('hidden');
                    modalCancel.textContent = 'OK';
                } else if (type === 'confirm') {
                    modalConfirm.classList.remove('hidden');
                    modalCancel.textContent = 'Cancel';
                } else if (type === 'success') {
                    modalConfirm.classList.add('hidden');
                    modalCancel.textContent = 'OK';
                    modalContent.innerHTML = '<div class="text-center py-4"><i class="fas fa-check-circle text-green-400 text-5xl"></i></div>';
                }
                
                // Set up event listeners
                modalCancel.onclick = () => {
                    hideModal();
                };
                
                modalConfirm.onclick = () => {
                    hideModal();
                    if (confirmCallback) confirmCallback();
                };
                
                modalClose.onclick = hideModal;
                
                // Show modal
                modal.classList.add('active');
            }
            
            function hideModal() {
                modal.classList.remove('active');
            }
            
            // Close modal when clicking outside
            modal.addEventListener('click', (e) => {
                if (e.target === modal) hideModal();
            });
        });
    </script>
</body>
</html>
